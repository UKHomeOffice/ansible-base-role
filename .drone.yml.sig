eyJhbGciOiJIUzI1NiJ9.LS0tCnBpcGVsaW5lOgogIGJ1aWxkX2ltYWdlOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGFuc2libGUtYmFzZSAuCiAgICB3aGVuOgogICAgICBicmFuY2g6CiAgICAgIGV2ZW50OiBbdGFnLHB1c2hdCgogIHRlc3RfaW1hZ2U6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgcnVuIC0tcm0gLXQgYW5zaWJsZS1iYXNlIGFuc2libGUtcGxheWJvb2sgLS1zeW50YXgtY2hlY2sgcGxheXMvYmFzZS55bWwgLXZ2dgogICAgd2hlbjoKICAgICAgZXZlbnQ6IFt0YWcscHVzaF0KCiAgaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkYXRhcGxhdGZvcm1fYm90IiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgYW5zaWJsZS1iYXNlIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9hbnNpYmxlLWJhc2U6JHtEUk9ORV9UQUd9CiAgICAgIC0gZG9ja2VyIHRhZyBhbnNpYmxlLWJhc2UgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Fuc2libGUtYmFzZToke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHRhZyBhbnNpYmxlLWJhc2UgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Fuc2libGUtYmFzZTpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvYW5zaWJsZS1iYXNlOiR7RFJPTkVfVEFHfQogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9hbnNpYmxlLWJhc2U6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9hbnNpYmxlLWJhc2U6bGF0ZXN0CiAgICB3aGVuOgogICAgICBldmVudDogW3RhZ10KCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEtZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCgo.XLJYAaVhr2kSvN54_-cnlSIrn_49fDDHgwHd4f4-YvM